<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:int="http://www.springframework.org/schema/integration"
       xmlns:int-http="http://www.springframework.org/schema/integration/http"
       xsi:schemaLocation="
       	http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/integration
        http://www.springframework.org/schema/integration/spring-integration.xsd
        http://www.springframework.org/schema/integration/http
        http://www.springframework.org/schema/integration/http/spring-integration-http.xsd">

    <int:annotation-config/>

    <!-- Misc Channels -->
    <int:logging-channel-adapter id="loggingChannel" level="DEBUG" expression="payload"/>
    <int:wire-tap channel="loggingChannel"/>

    <!--Event-->
    <int:publish-subscribe-channel id="eventChannel"/>
    <int:publish-subscribe-channel id="pricingEventChannel"/>
    <int:publish-subscribe-channel id="orderEventChannel"/>
    <int:publish-subscribe-channel id="tradeEventChannel"/>

    <int-http:inbound-channel-adapter id="eventInboundAdapter"
                                      supported-methods="POST"
                                      path="/event"
                                      channel="eventChannel"/>

    <int:header-value-router id="eventRouter"
                             input-channel="eventChannel"
                             header-name="event-type">
        <int:mapping value="pricing" channel="pricingEventChannel"/>
        <int:mapping value="order" channel="orderEventChannel"/>
        <int:mapping value="trade" channel="tradeEventChannel"/>
    </int:header-value-router>

    <int-http:outbound-channel-adapter id="pricingEventOutboundAdapter"
                                       channel="pricingEventChannel"
                                       http-method="POST"
                                       url="${opes.bot.host}/bot/"/>

    <int-http:outbound-channel-adapter id="pricingEventOutboundAdapter"
                                       channel="pricingEventChannel"
                                       http-method="POST"
                                       url="${opes.bot.host}/bot/"/>

    <!--Data Request-->
    <int:channel id="dataRequestChannel"/>
    <int:channel id="dataRequestDLChannel">
        <int:queue capacity="10"/>
    </int:channel>
    <int:channel id="dataResponseChannel"/>
    <int:channel id="pricingRequestChannel"/>
    <int:channel id="candleRequestChannel"/>
    <int:channel id="deserializedCandleRequestChannel"/>
    <int:channel id="orderDetailsRequestChannel"/>
    <int:channel id="tradeDetailsRequestChannel"/>
    <int:channel id="transactionDetailsRequestChannel"/>
    <int:channel id="smaRequestChannel"/>
    <int:channel id="emaRequestChannel"/>

    <int-http:inbound-gateway id="dataRequestGateway"
                              supported-methods="POST"
                              path="/data"
                              request-channel="dataRequestChannel"
                              reply-channel="dataResponseChannel"
                              mapped-request-headers="Data-Type, User-Agent, Content-Type, Connection"/>

    <int:header-value-router id="dataRequestRouter"
                             input-channel="dataRequestChannel"
                             header-name="data-type">
        <int:mapping value="pricing" channel="pricingRequestChannel"/>
        <int:mapping value="candle" channel="candleRequestChannel"/>
        <int:mapping value="order" channel="orderDetailsRequestChannel"/>
        <int:mapping value="trade" channel="tradeDetailsRequestChannel"/>
        <int:mapping value="transaction" channel="transactionDetailsRequestChannel"/>
        <int:mapping value="sma" channel="smaRequestChannel"/>
        <int:mapping value="ema" channel="emaRequestChannel"/>
    </int:header-value-router>

    <int-http:outbound-gateway id="pricingRequestGateway"
                               request-channel="pricingRequestChannel"
                               reply-channel="dataResponseChannel"
                               http-method="GET"
                               url="${opes.oanda.host}/pricing?instruments={instruments}%26since={since}"
                               mapped-request-headers="Data-Type, User-Agent, Content-Type, Connection"
                               expected-response-type="java.util.Map">
        <int-http:uri-variable name="instruments" expression="payload.instruments"/>
        <int-http:uri-variable name="since" expression="payload.since"/>
    </int-http:outbound-gateway>

    <!--<int:json-to-object-transformer input-channel="candleRequestChannel"-->
    <!--output-channel="deserializedCandleRequestChannel"-->
    <!--type="pl.jdev.opes_commons.rest.message.CandlesRequest"/>-->

    <!--<int-http:outbound-gateway id="candleRequestGateway"-->
    <!--request-channel="deserializedCandleRequestChannel"-->
    <!--reply-channel="dataResponseChannel"-->
    <!--mapped-request-headers="Data-Type, User-Agent, Content-Type, Connection"-->
    <!--expected-response-type="pl.jdev.opes_commons.rest.wrapper.JsonCandlestickListWrapper"-->
    <!--http-method="GET"-->
    <!--url-expression="T(org.springframework.web.util.UriComponentsBuilder)-->
    <!--.fromHttpUrl('${opes.oanda.host}/${opes.oanda.version}/instruments/{instrument}/candles')-->
    <!--.queryParam('priceType', payload.getPriceType())-->
    <!--.queryParam('granularity', payload.getGranularity())-->
    <!--.query(payload.getCount() != 0 ? 'count=' + payload.getCount() : '')-->
    <!--.query(payload.getFrom() != null ? 'from=' + payload.getFrom() : '')-->
    <!--.query(payload.getTo() != null ? 'to=' + payload.getTo() : '')-->
    <!--.buildAndExpand(payload.getInstrument())-->
    <!--.toUri()"/>-->

    <int-http:outbound-gateway id="candleRequestGateway"
                               request-channel="candleRequestChannel"
                               reply-channel="dataResponseChannel"
                               mapped-request-headers="Data-Type, User-Agent, Content-Type, Connection"
                               expected-response-type="pl.jdev.opes_commons.rest.wrapper.JsonCandlestickListWrapper"
                               http-method="GET"
                               url-expression="T(org.springframework.web.util.UriComponentsBuilder)
    .fromHttpUrl('${opes.oanda.host}/${opes.oanda.version}/instruments/{instrument}/candles')
    .queryParam('priceType', #jsonPath(payload, '$.priceType'))
    .queryParam('granularity', #jsonPath(payload, '$.granularity'))
    .query(#jsonPath(payload, '$.count') != 0 ? 'count=' + #jsonPath(payload, '$.count') : '')
    .query(#jsonPath(payload, '$.from') != null ? 'from=' + #jsonPath(payload, '$.from') : '')
    .query(#jsonPath(payload, '$.to') != null ? 'to=' + #jsonPath(payload, '$.to') : '')
    .buildAndExpand(#jsonPath(payload, '$.instrument'))
    .toUri()"/>

    <int-http:outbound-gateway id="smaRequestGateway"
                               request-channel="smaRequestChannel"
                               reply-channel="dataResponseChannel"
                               http-method="POST"
                               url="${opes.bot.host}/${opes.bot.version}/indicator/sma"
                               mapped-request-headers="Data-Type, User-Agent, Content-Type, Connection"
                               expected-response-type="java.util.Map"/>

    <int-http:outbound-gateway id="emaRequestGateway"
                               request-channel="emaRequestChannel"
                               reply-channel="dataResponseChannel"
                               http-method="POST"
                               url="${opes.bot.host}/${opes.bot.version}/indicator/ema"
                               mapped-request-headers="Data-Type, User-Agent, Content-Type, Connection"
                               expected-response-type="java.util.Map"/>

    <!--Action-->
    <int:channel id="actionRequestChannel"/>
    <int:channel id="actionRequestDLChannel">
        <int:queue capacity="10"/>
    </int:channel>
    <int:channel id="actionResponseChannel"/>
    <int:channel id="createOrderChannel"/>
    <int:channel id="cancelOrderChannel"/>
    <int:channel id="closeTradeChannel"/>

    <int-http:inbound-gateway id="actionGateway"
                              supported-methods="POST"
                              path="/action"
                              request-channel="actionRequestChannel"
                              reply-channel="actionResponseChannel"
                              mapped-request-headers="Action-Type, User-Agent, Content-Type, Connection"/>

    <int:header-value-router id="actionRouter"
                             input-channel="actionRequestChannel"
                             header-name="action-type">
        <int:mapping value="createOrder" channel="createOrderChannel"/>
        <int:mapping value="cancelOrder" channel="cancelOrderChannel"/>
        <int:mapping value="closeTrade" channel="closeTradeChannel"/>
    </int:header-value-router>

    <int-http:outbound-channel-adapter id="createOrderOutboundAdapter"
                                       channel="createOrderChannel"
                                       http-method="POST"
                                       url="${opes.oanda.host}/${opes.oanda.version}/orders"/>

    <int-http:outbound-channel-adapter id="cancelOrderOutboundAdapter"
                                       channel="cancelOrderChannel"
                                       http-method="PUT"
                                       url-expression="T(org.springframework.web.util.UriComponentsBuilder)
    .fromHttpUrl('${opes.oanda.host}/${opes.oanda.version}/orders/{extOrderId}')
    .buildAndExpand(payload.getExtOrderId())
    .toUri()"/>

    <int-http:outbound-channel-adapter id="closeTradeOutboundAdapter"
                                       channel="closeTradeChannel"
                                       http-method="PUT"
                                       url-expression="T(org.springframework.web.util.UriComponentsBuilder)
    .fromHttpUrl('${opes.oanda.host}/${opes.oanda.version}/trades/{extTradeId}/close')
    .buildAndExpand(payload.getExtOrderId())
    .toUri()"/>

</beans>